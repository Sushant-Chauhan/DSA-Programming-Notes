LBP77

Print all permutations of a string

Given a string str, the task is to print all the permutations of str.

A permutation is an arrangement of all or part of a set of objects, with regard to the order of the arrangement.

For instance, the words "bat" and "tab" represents two distinct permutation (or arrangements) 
of a similar three letter word.

input ----> string from the user
con ------> no
output ---> all permutations of the string


A [1!=1]  ---------> A
AB [2!=2]  --------> AB, BA
ABC [3!=6]  -------> ABC, ACB, BAC, BCA, CAB, CBA
ABCD [4!=24] ------>
ABCD ABDC ACBD ACDB ADCB ADBC BACD BADC BCAD BCDA BDCA BDAC CBAD CBDA CABD CADB CDAB CDBA DBCA DBAC DCBA DCAB DACB DABC 
ABCDE [5!=120] ---->
ABCDE ABCED ABDCE ABDEC ABEDC ABECD ACBDE ACBED ACDBE ACDEB ACEDB ACEBD ADCBE ADCEB ADBCE ADBEC ADEBC ADECB AECDB AECBD AEDCB AEDBC AEBDC AEBCD BACDE BACED BADCE BADEC BAEDC BAECD BCADE BCAED BCDAE BCDEA BCEDA BCEAD BDCAE BDCEA BDACE BDAEC BDEAC BDECA BECDA BECAD BEDCA BEDAC BEADC BEACD CBADE CBAED CBDAE CBDEA CBEDA CBEAD CABDE CABED CADBE CADEB CAEDB CAEBD CDABE CDAEB CDBAE CDBEA CDEBA CDEAB CEADB CEABD CEDAB CEDBA CEBDA CEBAD DBCAE DBCEA DBACE DBAEC DBEAC DBECA DCBAE DCBEA DCABE DCAEB DCEAB DCEBA DACBE DACEB DABCE DABEC DAEBC DAECB DECAB DECBA DEACB DEABC DEBAC DEBCA EBCDA EBCAD EBDCA EBDAC EBADC EBACD ECBDA ECBAD ECDBA ECDAB ECADB ECABD EDCBA EDCAB EDBCA EDBAC EDABC EDACB EACDB EACBD EADCB EADBC EABDC EABCD 
6===> {1,5}, {2,4}, {3,3}, {3,3}, {4,2} and {5,1}

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
void swap(char *x,char *y){
    char t;
    t=*x;
    *x=*y;
    *y=t;
}
void permute(char *p,int left,int right){
    int i;
    if(left==right)
        printf("%s ",p);
    else{
        for(i=left;i<=right;i++){
            swap((p+left),(p+i));
            permute(p,left+1,right);
            swap((p+left),(p+i));
        }
    }
}

int main() {
    char s[100];
    scanf("%s",s);
    permute(s,0,strlen(s)-1);
    return 0;
}

java implementation:
--------------------
import java.io.*;
import java.util.*;

public class Solution {
    public static void permute(String s,int left,int right){
        if(left==right)
            System.out.print(s+" ");
        else{
            for(int i=left;i<=right;i++){
                s = swap(s,left,i);
                permute(s,left+1,right);
                s = swap(s,left,i);
            }
        }
    }
    static String swap(String a,int i,int j){
        char temp;
        char[] charArray=a.toCharArray();
        temp = charArray[i];
        charArray[i]=charArray[j];
        charArray[j]=temp;
        return String.valueOf(charArray);
    }
    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        String s = obj.nextLine();
        permute(s,0,s.length()-1);
    }
}

python implementation:
----------------------
from itertools import permutations
l=list(permutations(input()))
for i in l:
    print(''.join(i),end=' ')


LBP85

Integer to English Words

Convert a non-negative integer num to its English words representation.

input ------> a number from the user
con --------> n>0
output -----> number in English words


123 ===> one hundred twenty three
9999 ==> Nine Thousand Nine Hundred Ninty Nine

c implementation:
-----------------
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {
    char *belowten[]={"Zero","One","Two","Three","Four","Five","Six","Seven","Eight","Nine"};
    char *tensplace[]={"","Ten","Twenty","Thirty","Fourty","Fifty","Sixty","Seventy","Eighty","Ninety"};
    char *belowtwenty[]={"","Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen"};
    char s[10];
    scanf("%s",s);
    int num,len;
    len=strlen(s);
    if(len==1){
        num=s[0]-48;
        printf("%s ",belowten[num]);
    }
    else if(len==2 && s[1]==48){ //10,20,30,40,50,60,70,80,90
        num=s[0]-48;
        printf("%s ",tensplace[num]);
    }
    else if(len==2 && s[0]==49){ //10,11,12,13,14,15,16,17,18,19
        num=s[1]+1-48;
        printf("%s ",belowtwenty[num]);
    }
    else if(len==2){ //21-99
        num = s[0]-48;
        printf("%s ",tensplace[num]);
        num=s[1]-48;
        printf("%s ",belowten[num]);
    }
    else if(len==3){
        num=s[0]-48;
        printf("%s ",belowten[num]);
        printf("Hundred ");
        if(s[1]==48){//101,102,203
            num=s[2]-48;
            printf("%s ",belowten[num]);
        }
        else if(s[1]==49){//112,219,..
            num=s[2]+1-48;
            printf("%s ",belowtwenty[num]);
        }
        else if(s[2]==48){//x10, x50, x90
            num=s[1]-48;
            printf("%s ",tensplace[num]);
        }
        else{ //856
            num=s[1]-48;
            printf("%s ",tensplace[num]);
            num=s[2]-48;
            printf("%s ",belowten[num]);
        }
    }
    else if(len==4){
        num=s[0]-48;
        printf("%s ",belowten[num]);
        printf("Thousand ");
        if(s[1]-48!=0){
            num=s[1]-48;
            printf("%s ",belowten[num]);
            printf("Hundred ");
        }
        if(s[2]==48){
            num=s[3]-48;
            if(num!=0)
                printf("%s ",belowten[num]);
        }
        else
        {
           if(s[3]==48){
               num=s[2]-48;
               printf("%s ",tensplace[num]);
           } 
           else if(s[2]==49){
               num=s[3]-48+1;
               printf("%s ",belowtwenty[num]);
           }
            else{
                num=s[2]-48;
                printf("%s ",tensplace[num]);
                num=s[3]-48;
                printf("%s ",belowten[num]);
            }
        }
    }
    return 0;
}


java implementation:
-------------------
import java.io.*;
import java.util.*;

public class Solution {
    static String[] belowten={"","One","Two","Three","Four","Five","Six","Seven","Eight","Nine"};
    static String[] belowtwenty={"Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen"};
    static String[] belowhundred={"","Ten","Twenty","Thirty","Fourty","Fifty","Sixty","Seventy","Eighty","Ninety"};
    
    
    static String helpme(int n){
        String result="";
        if(n<10){
            result=belowten[n];
        }
        else if(n<20){
            result=belowtwenty[n];
        }
        else if(n<100){
            result=belowhundred[n/10]+" "+helpme(n%10);
        }
        else if(n<1000){
            result=helpme(n/100)+" Hundred "+helpme(n%100);
        }
        else if(n<10000)
            result=helpme(n/1000)+" Thousand "+helpme(n%1000);
        return result;
    }
    
    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        int n=obj.nextInt();
        if(n==0)
            System.out.println("Zero");
        else
            System.out.println(helpme(n));
    }
}

python implementation:
---------------------
d1=["","One","Two","Three","Four","Five","Six","Seven","Eight","Nine","","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen"]
d2=["","","Twenty","Thirty","Fourty","Fifty","Sixty","Seventy","Eighty","Ninety"]

def check(n,string):
    if n==0:
        return ''
    elif n>=19:
        s=d2[n//10]+' '+d1[n%10]+string
        return s
    else:
        return d1[n]+' '+string

n=int(input())
if n==0:
    print('zero')
else:
    result=check((n//1000)%100,'Thousand ')
    result+=check((n//100)%10,'Hundred ')
    result+=check(n%100,'')
    print(result)

