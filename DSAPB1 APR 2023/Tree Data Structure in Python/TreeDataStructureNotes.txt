linear data structure ----> memory allocation will be done continuos
non-linear data structure-> memory allocation will be random

Tree and Graph

Tree data structure
-------------------
Module1: Tree Data Structure (Theory)
Module2: Binary Tree (BT)
Module3: Binary Search Tree (BST)
Module4: AVL Trees 

Module1: Tree Data Structure (Theory)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
=> It is a non-linear data structure.
=> Hierarchical relationship.
=> Relationship between parent and child.
=> Each Node is connected to another Node by using Edges.
=> Best suitable for search Operations.

linear search ---> O(n)
hashtable -------> O(1)
binary search ---> O(logn)

=> normal tree vs binary tree

Tree is a finate set of one or more nodes such that,

1) There is sepcially designed node will be there called as Root Node.
2) Remaining nodes are partitioned into n>=0 disjoint sets.

Tree Data Structure Terminologies
---------------------------------
Root:
-----
Unique node, having only out going edges.

Ex: A

Node:
-----
Fundamental element of a tree, each node has the following three fields

1) data field (actual information)
2) left pointer pointing to left child
3) right pointer pointing to right child

Edges:
------
It is also a fundamental part of tree, used to connect two nodes.

Ex:
	AB
	AC
	AD
	BE
	BF
	BG
	DH
	EI

Path:
-----
An ordered list of nodes that are connected by edges are called as path

Ex:
	A to G ---> AB, BG
	A to I ---> AB, BE, EI

Leaf Nodes:
-----------
The nodes which are not having any chidlren are called as leaf nodes or nodes without outgoing edges.

Ex:
	I
	F
	G
	H
	C

Height of the tree:
-------------------
height of the tree sum of edges on the longest path between root and leaf node.

Ex:
---
	AI ---> 1+1+1 = 3

level of the tree:
------------------
The level of node/tree is num of edges on the path from root to that node

Ex:
	A       ----> 0
	B,C,D ------> 1
	E,F,G,H ----> 2
	I ----------> 3

parent:
-------
Node is parent of all the children that are linked by out going edges.

Ex:
	A, B, D, E

children:
---------
Nodes that are having incoming edges are children.

Ex:
	B, C, D, E, F, G, H, I

Siblings:
---------
Nodes in the tree that are children of the same parent are called as siblings

Ex:
	BCD, EFG

degree of a node:
-----------------
Total num of sub-trees attached to that node is called as degree of the node.

Degree of A -----> 3
Degree of B -----> 3
Degree of C -----> 0
Degree of D -----> 1

degree of a tree:
-----------------
max degree of all nodes is called as degree of tree.

D(T) ---> 3

ancestor:
---------
A node reachable through repeated moving from child to parent.

Ex: I ----> E, B, A

predessor:
----------
while displaying/traversing/visiting if node comes before another node then that node is called as predessor of that node.

Ex:
	E is Predessor of I

successor:
----------
while displaying/traversing/visiting if node comes after another node then that node is called as successor of that node.

Ex:
	E is successor of B

Module2: Binary Tree (BT)
~~~~~~~~~~~~~~~~~~~~~~~~~
Binary Tree is a type of Tree in which each node has atmost two children (0 or 1 or 2), which are reffered as the left child and right child.

In BT each node will have one data field and two pointer fileds pointing to left sub-tree and right sub-tree.

binary tree representation:
---------------------------
There are two ways are there to represent binary trees

1) sequential representation (lists)
2) linked list representation (double linked list)

1) sequential representation (lists)
------------------------------------
In this sequential representation if a node is present at nth location

Parent -------> n
Left Child ---> 2n+1
Right Child --> 2n+2

Ex:
   [1, 2, 3, 4, 5, 6, 7]
    0  1  2  3  4  5  6

Ex: n=0 => 1, l(0)=2n+1=0+1=1, r(0)=2n+2=0+2=2
Ex: n=2 => 3, l(2)=2n+1=2*2+1=5, r(2)=2n+2=2*2+2=6

2) linked list representation (double linked list)
--------------------------------------------------
we can use double node structure to represent BT in linked list format.

binary tree traversals:
~~~~~~~~~~~~~~~~~~~~~~~
traversing the tree is nothing but visiting/displaying each node present in the tree once. the following are the various methods existed for BT traversals.

Root ---> D
Left ---> L
Right --> R

1) Inorder Traversals ------> LDR ---> Left, Root, Right
2) Preorder Traversals -----> DLR ---> Root, Left, Right
3) Postorder Traversals ----> LDR ---> Left, Right, Root

Ex1:
----
	Inorder ----> BAC
	Preorder ---> ABC
	Postorder --> BCA

Ex2:
----
	Inorder ----> DBEAC
	Preorder ---> ABDEC
	Postorder --> DEBCA

Ex3:
----
Inorder -----> FBADCE
Preorder ----> ABFCDE
Postorder ---> FBDECA

L = [1, 2, 3, 4, 5, 6, 7]

Ex4:
----
Inorder -----> 4 2 5 1 6 3 7
Preorder ----> 1 2 4 5 3 6 7
Postorder ---> 4 5 2 6 7 3 1


L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

Ex5:
----

Inorder ---> 8 4 9 2 10 5 11 1 12 6 13 3 14 7 15
Preorder --> 1 2 4 8 9 5 10 11 3 6 12 13 7 14 15
Postorder -> 8 9 4 10 11 5 2 12 13 6 14 15 7 3 1

creation of binary tree using list:
-----------------------------------
class Tree:

	class Node:

		def __init__(self,data,left=None,right=None):
			self.data = data
			self.left = left
			self.right = right
		
	def __init__(self):
		self.root = None
	
	def createtree(self,L):
		self.root = self.createtree_util(L,0)
	
	def createtree_util(self,L,start):
		size = len(L)
		curr = self.Node(L[start])
		l = 2*start + 1
		r = 2*start + 2
		if l < size:
			curr.left = self.createtree_util(L,l)
		if r < size:
			curr.right = self.createtree_util(L,r)
		return curr
	
	def print_in_order(self):
		self.print_in_order_util(self.root)
		print()
	
	def print_in_order_util(self,node):
		if node!=None:
			self.print_in_order_util(node.left)
			print(node.data,end=' ')
			self.print_in_order_util(node.right)

L = [1, 2, 3, 4, 5, 6, 7]
T = Tree()
T.createtree(L)
T.print_in_order()

C:\test>py test.py
4 2 5 1 6 3 7

creation of binary tree using linked list:
------------------------------------------
class Tree:

	class Node:

		def __init__(self,data,left=None,right=None):
			self.data = data
			self.left = left
			self.right = right
		
	def __init__(self):
		self.root = None
	
	def print_in_order(self):
		self.print_in_order_util(self.root)
		print()
	
	def print_in_order_util(self,node):
		if node!=None:
			self.print_in_order_util(node.left)
			print(node.data,end=' ')
			self.print_in_order_util(node.right)

T = Tree()
T.root = T.Node(2)
T.root.left = T.Node(1)
T.root.left.left = T.Node(4)
T.root.left.right = T.Node(5)
T.root.right = T.Node(3)
T.print_in_order() #4 1 5 2 3

C:\test>py test.py
4 1 5 2 3

inorder and preorder and post order
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class Tree:

	class Node:

		def __init__(self,data,left=None,right=None):
			self.data = data
			self.left = left
			self.right = right
		
	def __init__(self):
		self.root = None
	
	def createtree(self,L):
		self.root = self.createtree_util(L,0)
	
	def createtree_util(self,L,start):
		size = len(L)
		curr = self.Node(L[start])
		l = 2*start + 1
		r = 2*start + 2
		if l < size:
			curr.left = self.createtree_util(L,l)
		if r < size:
			curr.right = self.createtree_util(L,r)
		return curr
	
	def print_in_order(self):
		self.print_in_order_util(self.root)
		print()
	
	def print_in_order_util(self,node):
		if node!=None:
			self.print_in_order_util(node.left)
			print(node.data,end=' ')
			self.print_in_order_util(node.right)
	
	def print_pre_order(self):
		self.print_pre_order_util(self.root)
		print()
	
	def print_pre_order_util(self,node):
		if node!=None:
			print(node.data,end=' ')
			self.print_pre_order_util(node.left)
			self.print_pre_order_util(node.right)
	
	def print_post_order(self):
		self.print_post_order_util(self.root)
		print()
	
	def print_post_order_util(self,node):
		if node!=None:
			self.print_post_order_util(node.left)
			self.print_post_order_util(node.right)
			print(node.data,end=' ')

L = [1, 2, 3, 4, 5, 6, 7]
T = Tree()
T.createtree(L)
T.print_in_order() #4 2 5 1 6 3 7
T.print_pre_order() #1 2 4 5 3 6 7
T.print_post_order() #4 5 2 6 7 3 1

C:\test>py test.py
4 2 5 1 6 3 7
1 2 4 5 3 6 7
4 5 2 6 7 3 1

level order
~~~~~~~~~~~
class Tree:

	class Node:

		def __init__(self,data,left=None,right=None):
			self.data = data
			self.left = left
			self.right = right
		
	def __init__(self):
		self.root = None
	
	def createtree(self,L):
		self.root = self.createtree_util(L,0)
	
	def createtree_util(self,L,start):
		size = len(L)
		curr = self.Node(L[start])
		l = 2*start + 1
		r = 2*start + 2
		if l < size:
			curr.left = self.createtree_util(L,l)
		if r < size:
			curr.right = self.createtree_util(L,r)
		return curr
	
	def print_in_order(self):
		self.print_in_order_util(self.root)
		print()
	
	def print_in_order_util(self,node):
		if node!=None:
			self.print_in_order_util(node.left)
			print(node.data,end=' ')
			self.print_in_order_util(node.right)
	
	def print_pre_order(self):
		self.print_pre_order_util(self.root)
		print()
	
	def print_pre_order_util(self,node):
		if node!=None:
			print(node.data,end=' ')
			self.print_pre_order_util(node.left)
			self.print_pre_order_util(node.right)
	
	def print_post_order(self):
		self.print_post_order_util(self.root)
		print()
	
	def print_post_order_util(self,node):
		if node!=None:
			self.print_post_order_util(node.left)
			self.print_post_order_util(node.right)
			print(node.data,end=' ')
	
	def print_level_order(self):
		if self.root == None:
			return None
		q = []
		q.append(self.root)
		q.append(None)

		while len(q)!=0:
			temp = q.pop(0)
			if temp==None:
				print()
				if len(q)==0:
					break
				else:
					q.append(None)
			else:
				print(temp.data,end=" ")
				if temp.left!=None:
					q.append(temp.left)
				if temp.right!=None:
					q.append(temp.right)





L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
T = Tree()
T.createtree(L)
T.print_in_order() 
T.print_level_order() 
'''
                1
           2          3
        4    5     6     7
       8 9 10 11 12 13 14 15
'''


count nodes
sum of nodes
height of the tree
search
find max element
find min element
num of leaf nodes
print all paths
equal

copy of tree

import sys

class Tree:

	class Node:

		def __init__(self,data,left=None,right=None):
			self.data = data
			self.left = left
			self.right = right
		
	def __init__(self):
		self.root = None
	
	def createtree(self,L):
		self.root = self.createtree_util(L,0)
	
	def createtree_util(self,L,start):
		size = len(L)
		curr = self.Node(L[start])
		l = 2*start + 1
		r = 2*start + 2
		if l < size:
			curr.left = self.createtree_util(L,l)
		if r < size:
			curr.right = self.createtree_util(L,r)
		return curr
	
	def print_in_order(self):
		self.print_in_order_util(self.root)
		print()
	
	def print_in_order_util(self,node):
		if node!=None:
			self.print_in_order_util(node.left)
			print(node.data,end=' ')
			self.print_in_order_util(node.right)
	
	def print_pre_order(self):
		self.print_pre_order_util(self.root)
		print()
	
	def print_pre_order_util(self,node):
		if node!=None:
			print(node.data,end=' ')
			self.print_pre_order_util(node.left)
			self.print_pre_order_util(node.right)
	
	def print_post_order(self):
		self.print_post_order_util(self.root)
		print()
	
	def print_post_order_util(self,node):
		if node!=None:
			self.print_post_order_util(node.left)
			self.print_post_order_util(node.right)
			print(node.data,end=' ')
	
	def print_level_order(self):
		if self.root == None:
			return None
		q = []
		q.append(self.root)
		q.append(None)

		while len(q)!=0:
			temp = q.pop(0)
			if temp==None:
				print()
				if len(q)==0:
					break
				else:
					q.append(None)
			else:
				print(temp.data,end=" ")
				if temp.left!=None:
					q.append(temp.left)
				if temp.right!=None:
					q.append(temp.right)
	
	def countnodes(self,node):
		if node==None:
			return 0
		lc = self.countnodes(node.left)
		rc = self.countnodes(node.right)
		return lc+rc+1
	
	def sumofnodes(self,node):
		if node==None:
			return 0
		ls = self.sumofnodes(node.left)
		rs = self.sumofnodes(node.right)
		return ls+rs+node.data
	
	def heightoftree(self,node):
		if node==None:
			return 0
		lh = self.heightoftree(node.left)
		rh = self.heightoftree(node.right)
		return max(lh,rh)+1
	
	def search(self,node,key):
		if node==None:
			return False
		if node.data==key:
			return True
		if self.search(node.left,key):
			return True
		if self.search(node.right,key):
			return True
		return False
	
	def findmaxelement(self,node):
		if node==None:
			return -1
		m = node.data
		l = self.findmaxelement(node.left)
		r = self.findmaxelement(node.right)
		return max(m,l,r)
	
	def findminelement(self,node):
		if node==None:
			return sys.maxsize
		m = node.data
		l = self.findminelement(node.left)
		r = self.findminelement(node.right)
		return min(m,l,r)
	
	def numofleaf(self,node):
		if node==None:
			return 0
		if node.left==None and node.right==None:
			return 1
		return self.numofleaf(node.left)+self.numofleaf(node.right)
	
	def printallpaths(self):
		s = []
		self.printallpaths_util(self.root,s)
	
	def printallpaths_util(self,node,s):
		if node==None:
			return
		s.append(node.data)
		if node.left==None and node.right==None:
			print(s)
			s.pop()
			return
		self.printallpaths_util(node.left,s)
		self.printallpaths_util(node.right,s)
		s.pop()
	
	def equal(self,node1,node2):
		if node1==None and node2==None:
			return True
		if node1==None or node2==None:
			return False
		return self.equal(node1.left,node2.left) and self.equal(node1.right,node2.right) and node1.data==node2.data
	
	def copytree(self,node):
		if node!=None:
			temp = self.Node(node.data)
			temp.left = self.copytree(node.left)
			temp.right = self.copytree(node.right)
			return temp
		else:
			return None

'''

L = [1, 2, 3, 4, 5, 6, 7, 8, 9, -10, 11, 12, 13, 14,]
T = Tree()
T.createtree(L)
T.print_in_order() 
T.print_level_order() 
print(T.countnodes(T.root)) #15
print(T.sumofnodes(T.root)) #120
print(T.heightoftree(T.root)) #4
print(T.search(T.root,11)) #True
print(T.search(T.root,22)) #False
print(T.search(T.root,15)) #True
print(T.search(T.root,25)) #False
print(T.findmaxelement(T.root)) #14
print(T.findminelement(T.root)) #-15
print(T.numofleaf(T.root)) #
T.printallpaths()

L1 = [1, 2, 3]
T1 = Tree()
T1.createtree(L1)
T1.print_level_order() 


L2 = [1, 2, 13]
T2 = Tree()
T2.createtree(L2)
T2.print_level_order()

print(T1.equal(T1.root,T2.root))
'''

L1 = [1, 2, 3]
T1 = Tree()
T1.createtree(L1)
T1.print_level_order() 


T2 = Tree()
T2.root = T1.copytree(T1.root)
T2.print_level_order()

print(T1.equal(T1.root,T2.root))


Module3: Binary Search Tree (BST)
Module4: AVL Trees 

Heaps or Priority Queues
Graphs

